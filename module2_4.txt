---------5/4:
- Đọc và tìm hiểu 4 tính chất hướng đối tượng
  + Tính trừu tượng (Abstraction): Tạo ra các lớp trừu tượng mô hình hoá các đối tượng trong thế giới thực.
    Trong Java, chúng là sử dụng abstract class và abstract interface để có tính trừu tượng.
  + Tính đóng gói (Encapsulation): Các thực thể của lớp trừu tượng có các giá trị thuộc tính riêng biệt.
    Trong Java, tính đóng gói được thể hiện thông qua phạm vi truy cập (access modifier). Ngoài ra, các lớp liên quan đến nhau có thể được gom chung lại thành package.
  + Tính kế thừa (Inheritance): Các đối tượng có thể dễ dàng kế thừa và mở rộng lẫn nhau.
  + Tính đa hình (Polymorphism): Có thể thực hiện một hành động đơn theo nhiều cách thức khác nhau tuỳ theo loại đối tượng cụ thể đang được gọi.
    Trong Java, chúng ta sử dụng nạp chồng phương thức (method overloading) và ghi đè phương thức (method overriding) để có tính đa hình.
    • Nạp chồng (Overloading): Đây là khả năng cho phép một lớp có nhiều thuộc tính, phương thức cùng tên nhưng với các tham số khác nhau về loại cũng như về số lượng.
    • Ghi đè (Overriding): là hai phương thức cùng tên, cùng tham số, cùng kiểu trả về nhưng thằng con viết lại và dùng theo cách của nó, và xuất hiện ở lớp cha và tiếp tục
      xuất hiện ở lớp con.
- Đọc và tìm hiểu nguyên lí SOLID
  + S:  Single responsibility principle
  Một class chỉ nên giữ 1 trách nhiệm duy nhất
  (Chỉ có thể sửa đổi class với 1 lý do duy nhất)
  + O:  Open/closed principle
   Có thể thoải mái mở rộng 1 class, nhưng không được sửa đổi bên trong class đó
  (open for extension but closed for modification).
  + L:  Liskov Substitution Principle
   Trong một chương trình, các object của class con có thể thay thế class cha mà không làm thay đổi tính đúng đắn của chương trình
  + I:  Interface Segregation Principle
   Thay vì dùng 1 interface lớn, ta nên tách thành nhiều interface nhỏ, với nhiều mục đích cụ thể
  + D:  Dependency inversion principle
    1. Các module cấp cao không nên phụ thuộc vào các modules cấp thấp.
       Cả 2 nên phụ thuộc vào abstraction.
    2. Interface (abstraction) không nên phụ thuộc vào chi tiết, mà ngược lại.
    ( Các class giao tiếp với nhau thông qua interface, không phải thông qua implementation.)
- Xem lại bài CustomerManager xem áp dụng 4 tính chất ở đâu, dòng nào?